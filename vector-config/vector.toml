[api]
enabled = true
address = "[::]:8686"

[sources.fly_log_metrics]
type = "internal_metrics"

[sources.nats]
type = "nats"
url = "nats://[${NETWORK-fdaa}::3]:4223"
queue = "${QUEUE-}"
subject = "${SUBJECT-logs.>}"
auth.strategy = "user_password"
auth.user_password.user = "${ORG-personal}"
auth.user_password.password = "${ACCESS_TOKEN?}"
connection_name = "Fly logs stream"

[transforms.reshape]
type = "remap"
inputs = ["nats"]
source = '''
fly_log = parse_json!(.message)
raw_message = fly_log.message

app = fly_log.fly.app.name

ret_log = {"message": {"app": app}}

if app == "simt-scheduler-polished-mountain-8705" {
  message, err_parse_logfmt = parse_logfmt(raw_message)
  if err_parse_logfmt == null {
    ret_log.message |= {"message": message.msg, "level": message.level, "timestamp": message.time, "command": get!(message, ["job.command"])}
  } else {
    # not in the expected logfmt so log raw message
    ret_log.message |= {"message": raw_message}
  }
} else {
  # most other apps log in JSON:
  message, err_parse_json = parse_json(raw_message)
  if err_parse_json == null {
    ret_log.message |= object!(message)
  } else {
    # not in the expected json so log raw message
    ret_log.message |= {"message": raw_message, "timestamp": fly_log.timestamp}
  }
}

. = ret_log
'''

[sinks.fly_log_metrics_prometheus]
type = "prometheus_exporter"   # required
inputs = ["fly_log_metrics"]   # required
address = "[::]:9598"          # required
default_namespace = "fly-logs" # optional, no default

[sinks.reshape]
type = "blackhole"
inputs = ["log_json"]
print_interval_secs = 10000
